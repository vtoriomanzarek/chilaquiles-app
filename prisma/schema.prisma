// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(CUSTOMER)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String?
  price       Float
  category    ProductCategory
  available   Boolean       @default(true)
  orderItems  OrderItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Order {
  id         String      @id @default(cuid())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  items      OrderItem[]
  status     OrderStatus @default(PENDING)
  total      Float
  metadata   String?     // Para almacenar el número de orden y otros datos adicionales
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

enum Role {
  ADMIN
  STAFF
  KITCHEN
  WAITER
  CUSTOMER
}

enum ProductCategory {
  TORTILLA_CHIPS
  SAUCE
  PROTEIN
  TOPPING
  EXTRAS
  DRINK
}

enum OrderStatus {
  PENDING
  PAID
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

// Este modelo se implementará en futuras versiones
// model Invoice {
//   id         String   @id @default(cuid())
//   order      Order    @relation(fields: [orderId], references: [id])
//   orderId    String   @unique
//   number     String   @unique
//   taxAmount  Float
//   totalAmount Float
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }
